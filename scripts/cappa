#!/usr/bin/env python

import click
import json
import collections

from cappa import CapPA

@click.group()
def cappa():
    pass

@click.command()
@click.option('--requirements', '-r', default=None, type=click.File('rb'),
              help='install using requirements json file')
@click.option('--warn', is_flag=True,
              help='print errors as warning and continue')
@click.option('--private-https-oauth', is_flag=True,
              help='Use oauth authenticated https for private repositories (requires GITHUB_TOKEN env var)')
@click.option('--use-venv/--no-venv', default=True,
              help='Assumes install uses a python virtualenv')
@click.option('--ignore', default='',
              help='Comma separated list of managers to ignore')
@click.option('--only', default='',
              help='Comma separated list of managers to install')
@click.argument('packages', nargs=-1)
def install(requirements, warn, private_https_oauth, use_venv, ignore, only, packages):
    pa = CapPA(warn, private_https_oauth, use_venv)
    if ignore and only:
        raise click.ClickException('Only one of ignore-managers and install-only can be set')

    if only:
        only = only.split(',')
        ignore = filter(lambda manager: manager not in only, CapPA.ALL_MANAGERS)
    else:
        ignore = ignore.split(',')

    if requirements is None:
        pa.install(packages, ignore_managers=ignore)
    else:
        pa.install(json.loads(requirements.read(), object_pairs_hook=collections.OrderedDict), ignore_managers=ignore)
cappa.add_command(install)

@click.command()
def list():
    click.echo('list')
cappa.add_command(list)

@click.command()
def remove():
    click.echo('remove')
cappa.add_command(remove)

@click.command()
def version():
    click.echo('0.7')
cappa.add_command(version)

if __name__ == '__main__':
    cappa()
