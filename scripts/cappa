#!/usr/bin/env python

from __future__ import absolute_import

import click
import json
import collections
import subprocess
from distutils.spawn import find_executable

from cappa import CapPA


@click.group()
def cappa():
    pass


@click.command()
@click.option('--requirements', '-r', default=None, type=click.File('r'),
              help='install using requirements json file')
@click.option('--warn', is_flag=True,
              help='print errors as warning and continue')
@click.option('--private-https-oauth', is_flag=True,
              help='Use oauth authenticated https for private repositories (requires GITHUB_TOKEN env var)')
@click.option('--use-venv/--no-venv', default=True,
              help='Assumes install uses a python virtualenv')
@click.option('--ignore', default='',
              help='Comma separated list of managers to ignore')
@click.option('--only', default='',
              help='Comma separated list of managers to install')
@click.option('--save-js/--no-save-js', default=False,
              help='Save generated json files for npm/bower/tsd installs')
@click.argument('packages', nargs=-1)
def install(requirements,
            warn,
            private_https_oauth,
            use_venv,
            ignore,
            only,
            save_js,
            packages):
    pa = CapPA(warn, private_https_oauth, use_venv, save_js)
    if ignore and only:
        raise click.ClickException('Only one of ignore-managers and install-only can be set')

    if only:
        only = only.split(',')
        ignore = filter(lambda manager: manager not in only, CapPA.ALL_MANAGERS)
    else:
        ignore = ignore.split(',')

    if requirements is None:
        pa.install(packages, ignore_managers=ignore)
    else:
        pa.install(json.load(requirements, object_pairs_hook=collections.OrderedDict), ignore_managers=ignore)
cappa.add_command(install)


@click.command(name='list')
def list_all():
    """List installed packages"""
    if find_executable('bower'):
        click.echo('bower')
        # bower -o (offline) option prevents checking for updates when listing packages
        subprocess.call(['bower', 'list', '-o'])
    if find_executable('npm'):
        # npm --depth=0 lists top level packages without listing all sub-dependencies
        npm_args = ['npm', 'ls', '--depth=0']
        # npm -g option to list global packages
        npmg_args = npm_args + ['-g']
        click.echo('npm')
        subprocess.call(npm_args)
        click.echo('npmg')
        subprocess.call(npmg_args)
    if find_executable('pip'):
        click.echo('pip')
        subprocess.call(['pip', 'list'])
    if find_executable('dpkg'):
        click.echo('system')
        subprocess.call(['dpkg', '-l'])
cappa.add_command(list_all)


@click.command()
def remove():
    click.echo('remove')
cappa.add_command(remove)


@click.command()
def version():
    click.echo('0.11')
cappa.add_command(version)

if __name__ == '__main__':
    cappa()
